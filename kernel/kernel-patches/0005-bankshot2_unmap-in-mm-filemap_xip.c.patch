From bb077cb7d3189c91f2dc5e1f45e1e4d87da97113 Mon Sep 17 00:00:00 2001
From: Andiry Xu <jix024@cs.ucsd.edu>
Date: Mon, 28 Apr 2014 08:41:37 -0700
Subject: [PATCH 5/8] bankshot2_unmap in mm/filemap_xip.c


Signed-off-by: Andiry Xu <jix024@cs.ucsd.edu>
---
 include/linux/mm.h |  2 ++
 mm/filemap_xip.c   | 41 +++++++++++++++++++++++++++++++++++++++++
 mm/rmap.c          |  2 ++
 3 files changed, 45 insertions(+)

diff --git a/include/linux/mm.h b/include/linux/mm.h
index 86134be..214287a 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -1578,6 +1578,8 @@ extern unsigned long bankshot2_mmap(void *bs2_dev, unsigned long addr,
 		unsigned long len, unsigned long prot, unsigned long flags,
 		unsigned long fd, unsigned long pgoff);
 
+extern void bankshot2_unmap(struct address_space *mapping, struct page *page, unsigned long pgoff);
+
 struct vm_unmapped_area_info {
 #define VM_UNMAPPED_AREA_TOPDOWN 1
 	unsigned long flags;
diff --git a/mm/filemap_xip.c b/mm/filemap_xip.c
index 706f117..1c1ced3 100644
--- a/mm/filemap_xip.c
+++ b/mm/filemap_xip.c
@@ -155,6 +155,47 @@ xip_file_read(struct file *filp, char __user *buf, size_t len, loff_t *ppos)
 }
 EXPORT_SYMBOL_GPL(xip_file_read);
 
+void bankshot2_unmap(struct address_space *mapping, struct page *page, unsigned long pgoff)
+{
+	struct vm_area_struct *vma;
+	struct mm_struct *mm;
+	unsigned long address;
+//	struct page *page;
+	pte_t *pte;
+	pte_t pteval;
+	spinlock_t *ptl;
+
+	printk(KERN_ERR "%s, mapping %p, pgoff %lu\n", __func__, mapping, pgoff);
+//	page = xip_sparse_page();
+//	page = __xip_sparse_page;
+	if (!page)
+		return;
+
+	mutex_lock(&mapping->i_mmap_mutex);
+	vma_interval_tree_foreach(vma, &mapping->i_mmap, pgoff, pgoff) {
+		mm = vma->vm_mm;
+		address = vma->vm_start +
+			((pgoff - vma->vm_pgoff) << PAGE_SHIFT);
+		BUG_ON(address < vma->vm_start || address >= vma->vm_end);
+		pte = page_check_address(page, mm, address, &ptl, 1);
+		printk(KERN_ERR "%s: vma %p, pte %p\n", __func__, vma, pte);
+		if (pte) {
+			/* Nuke the page table entry. */
+			flush_cache_page(vma, address, pte_pfn(*pte));
+			pteval = ptep_clear_flush(vma, address, pte);
+			page_remove_rmap(page);
+			dec_mm_counter(mm, MM_FILEPAGES);
+			BUG_ON(pte_dirty(pteval));
+			pte_unmap_unlock(pte, ptl);
+			/* must invalidate_page _before_ freeing the page */
+			mmu_notifier_invalidate_page(mm, address);
+			page_cache_release(page);
+		}
+	}
+	mutex_unlock(&mapping->i_mmap_mutex);
+}
+EXPORT_SYMBOL_GPL(bankshot2_unmap);
+
 /*
  * __xip_unmap is invoked from xip_unmap and
  * xip_write
diff --git a/mm/rmap.c b/mm/rmap.c
index b2e29ac..6655f46 100644
--- a/mm/rmap.c
+++ b/mm/rmap.c
@@ -1177,6 +1177,7 @@ out:
 	if (!anon)
 		mem_cgroup_end_update_page_stat(page, &locked, &flags);
 }
+EXPORT_SYMBOL_GPL(page_remove_rmap);
 
 /*
  * Subfunctions of try_to_unmap: try_to_unmap_one called
@@ -1638,6 +1639,7 @@ int try_to_unmap(struct page *page, enum ttu_flags flags)
 		ret = SWAP_SUCCESS;
 	return ret;
 }
+EXPORT_SYMBOL_GPL(try_to_unmap);
 
 /**
  * try_to_munlock - try to munlock a page
-- 
1.8.1.2

