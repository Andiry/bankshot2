From 1e0b291b1fcaf730243807c31eee772b4acdcf32 Mon Sep 17 00:00:00 2001
From: Andiry Xu <jix024@cs.ucsd.edu>
Date: Mon, 28 Apr 2014 21:50:48 -0700
Subject: [PATCH 6/8] Add vm_munmap_page. Need more test, and pgoff needs more
 attention.


Signed-off-by: Andiry Xu <jix024@cs.ucsd.edu>
---
 include/linux/mm.h |  1 +
 mm/filemap_xip.c   | 19 ++++++++++++-------
 mm/mmap.c          | 11 +++++++++++
 3 files changed, 24 insertions(+), 7 deletions(-)

diff --git a/include/linux/mm.h b/include/linux/mm.h
index 214287a..b652078 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -1570,6 +1570,7 @@ static inline void mm_populate(unsigned long addr, unsigned long len) {}
 /* These take the mm semaphore themselves */
 extern unsigned long vm_brk(unsigned long, unsigned long);
 extern int vm_munmap(unsigned long, size_t);
+extern int vm_munmap_page(struct mm_struct *, unsigned long, size_t);
 extern unsigned long vm_mmap(struct file *, unsigned long,
         unsigned long, unsigned long,
         unsigned long, unsigned long);
diff --git a/mm/filemap_xip.c b/mm/filemap_xip.c
index 1c1ced3..5db0594 100644
--- a/mm/filemap_xip.c
+++ b/mm/filemap_xip.c
@@ -161,9 +161,9 @@ void bankshot2_unmap(struct address_space *mapping, struct page *page, unsigned
 	struct mm_struct *mm;
 	unsigned long address;
 //	struct page *page;
-	pte_t *pte;
-	pte_t pteval;
-	spinlock_t *ptl;
+//	pte_t *pte;
+//	pte_t pteval;
+//	spinlock_t *ptl;
 
 	printk(KERN_ERR "%s, mapping %p, pgoff %lu\n", __func__, mapping, pgoff);
 //	page = xip_sparse_page();
@@ -171,28 +171,33 @@ void bankshot2_unmap(struct address_space *mapping, struct page *page, unsigned
 	if (!page)
 		return;
 
-	mutex_lock(&mapping->i_mmap_mutex);
+//	mutex_lock(&mapping->i_mmap_mutex);
 	vma_interval_tree_foreach(vma, &mapping->i_mmap, pgoff, pgoff) {
 		mm = vma->vm_mm;
 		address = vma->vm_start +
 			((pgoff - vma->vm_pgoff) << PAGE_SHIFT);
 		BUG_ON(address < vma->vm_start || address >= vma->vm_end);
+
+		vm_munmap_page(mm, address, PAGE_SIZE);
+
+#if 0
 		pte = page_check_address(page, mm, address, &ptl, 1);
-		printk(KERN_ERR "%s: vma %p, pte %p\n", __func__, vma, pte);
+		printk(KERN_ERR "%s: vma %p, pte %p, vm_start %lx, vm_end %lx, vm_pgoff %lx, address %lx\n", __func__, vma, pte, vma->vm_start, vma->vm_end, vma->vm_pgoff, address);
 		if (pte) {
 			/* Nuke the page table entry. */
 			flush_cache_page(vma, address, pte_pfn(*pte));
 			pteval = ptep_clear_flush(vma, address, pte);
 			page_remove_rmap(page);
 			dec_mm_counter(mm, MM_FILEPAGES);
-			BUG_ON(pte_dirty(pteval));
+//			BUG_ON(pte_dirty(pteval));
 			pte_unmap_unlock(pte, ptl);
 			/* must invalidate_page _before_ freeing the page */
 			mmu_notifier_invalidate_page(mm, address);
 			page_cache_release(page);
 		}
+#endif
 	}
-	mutex_unlock(&mapping->i_mmap_mutex);
+//	mutex_unlock(&mapping->i_mmap_mutex);
 }
 EXPORT_SYMBOL_GPL(bankshot2_unmap);
 
diff --git a/mm/mmap.c b/mm/mmap.c
index e99c87f..2431a4a 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -2937,6 +2937,17 @@ int vm_munmap(unsigned long start, size_t len)
 }
 EXPORT_SYMBOL(vm_munmap);
 
+int vm_munmap_page(struct mm_struct *mm, unsigned long start, size_t len)
+{
+	int ret;
+
+	down_write(&mm->mmap_sem);
+	ret = do_munmap(mm, start, len);
+	up_write(&mm->mmap_sem);
+	return ret;
+}
+EXPORT_SYMBOL(vm_munmap_page);
+
 SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len)
 {
 	profile_munmap(addr);
-- 
1.8.1.2

